name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'
     
env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
    unit-testing:
        name: Unit Testing
        # strategy:
        #   matrix:
        #     nodejs_version: [18, 19, 20]
        #     operating_system: [ubuntu-latest, macos-latest]
        #     exclude:
        #       - nodejs_version: 18
        #         operating_system: macos-latest
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - 18
          uses: actions/setup-node@v3
          with:
            node-version: 18

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          #id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        
        - name: Install Dependencies
          run: npm install

        - name: Unit Testing
          id: nodejs-unit-testing-step
          run: npm test
        
        - name: Archive Test Result
          # if: always() # the same with && (steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success')
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        continue-on-error: true
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - 18
          uses: actions/setup-node@v4
          with:
            node-version: 18

        - name: Cache NPM dependencies
          uses: actions/cache@v4
          #id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
          with:
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

        - name: Install Dependencies
          run: npm install

        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5
    
    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        permissions:
          packages: write
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v3
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Docker Build For Testing
          uses: docker/build-push-action@v6
          with:
            context: . # path of the Dockerfile
            push: false #if false only build the image
            tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }} #github.sha use commit id as tag version
        
        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d  \
                  -p 3000:3000 \
                  -e MONGO_URI=$MONGO_URI \
                  -e MONGO_USERNAME=$MONGO_USERNAME \
                  -e MONGO_PASSWORD=$MONGO_PASSWORD \
                  ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
              
            echo Testing Image URL using wget 
            wget -q -O - 127.0.0.1:3000/live | grep live
        
        # - name: Docker Push
        #   uses: docker/build-push-action@v6
        #   with:
        #       context: . # path of the Dockerfile
        #       push: true #if false only build the image
        #       tags: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }} #github.sha use commit id as tag version

        - name: Container Registry Push # push to multiple registry
          uses: docker/build-push-action@v6
          with:
              context: . # path of the Dockerfile
              push: true #if false only build the image
              tags: | 
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
              # ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
    dev-deploy:
      needs: docker
      runs-on: ubuntu:latest
      steps:
        - name: Checkout repo
          uses: actions/checkout@v4
          
        # - name: Install kubectl CLI
        #   uses: azure/setup-kubectl@v4
        #   with:
        #     version: 'v1.31.0'

        # - name: set kubeconfig
        #   uses: azure/k8s-set-context@v4
        #   with:
        #     method: kubeconfig
        #     kubeconfig: ${{ secrets.KUBECONFIG }}
 
        
        # - name: Fetch kubernetes cluster details
        #   run: |
        #     kubectl version --short
        #     echo ------------------------------------
        #       kubectl get nodes

        # - uses: cschleiden/replace-tokens@v1
        #   with:
        #     tokenPrefix: '{'
        #     tokenSuffix: '}'
        #     files: '["kubernetes/development/*.yaml"]'
        #   env:
        #     NAMESPACE: ${{vars.NAMESPACE}}
        #     REPLICAS: ${{vars.REPLICAS}}
        #     IMAGE: ${{env.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

        # - name: Check files
        #   run: cat kubernetes/development/*.yaml

        # - name: Deploy to Dev env
        #   run: |
        #     kubectl apply -f kubernetes/deployment.yaml